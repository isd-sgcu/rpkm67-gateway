basePath: /api/v1
definitions:
  apperror.AppError:
    properties:
      httpCode:
        type: integer
      id:
        type: string
    type: object
  constant.Role:
    enum:
    - user
    - staff
    type: string
    x-enum-varnames:
    - USER
    - STAFF
  dto.BaanCount:
    properties:
      baan_id:
        type: string
      count:
        type: integer
    type: object
  dto.CheckIn:
    properties:
      email:
        type: string
      event:
        type: string
      id:
        type: string
      is_duplicate:
        type: boolean
      timestamp:
        type: string
      user_id:
        type: string
    type: object
  dto.CountByBaanIdSelectionResponse:
    properties:
      baan_counts:
        items:
          $ref: '#/definitions/dto.BaanCount'
        type: array
    type: object
  dto.CountResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.CreateCheckInRequest:
    properties:
      email:
        type: string
      event:
        type: string
      user_id:
        type: string
    type: object
  dto.CreateCheckInResponse:
    properties:
      checkin:
        $ref: '#/definitions/dto.CheckIn'
      firstname:
        type: string
      lastname:
        type: string
    type: object
  dto.CreateSelectionRequest:
    properties:
      baan_id:
        type: string
      group_id:
        type: string
      order:
        type: integer
    required:
    - baan_id
    - group_id
    - order
    type: object
  dto.Credential:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3BiZX...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: e7e84d54-7518-4...
        type: string
    type: object
  dto.DeleteMemberGroupBody:
    properties:
      deleted_user_id:
        type: string
      requesting_user_id:
        type: string
    required:
    - deleted_user_id
    - requesting_user_id
    type: object
  dto.DeleteMemberGroupResponse:
    properties:
      group:
        $ref: '#/definitions/dto.Group'
    type: object
  dto.DeleteSelectionRequest:
    properties:
      baan_id:
        type: string
      group_id:
        type: string
    required:
    - baan_id
    - group_id
    type: object
  dto.DeleteSelectionResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.FindAllPinResponse:
    properties:
      pins:
        items:
          $ref: '#/definitions/dto.Pin'
        type: array
    type: object
  dto.FindByEmailCheckInResponse:
    properties:
      checkins:
        items:
          $ref: '#/definitions/dto.CheckIn'
        type: array
    type: object
  dto.FindByGroupIdSelectionResponse:
    properties:
      selection:
        items:
          $ref: '#/definitions/dto.Selection'
        type: array
    type: object
  dto.FindByTokenGroupResponse:
    properties:
      id:
        type: string
      leader:
        $ref: '#/definitions/dto.UserInfo'
      token:
        type: string
    type: object
  dto.FindByUserIdCheckInResponse:
    properties:
      checkins:
        items:
          $ref: '#/definitions/dto.CheckIn'
        type: array
    type: object
  dto.FindByUserIdGroupResponse:
    properties:
      group:
        $ref: '#/definitions/dto.Group'
    type: object
  dto.FindByUserIdStampResponse:
    properties:
      stamp:
        $ref: '#/definitions/dto.Stamp'
    type: object
  dto.FindOneUserResponse:
    properties:
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.GetGoogleLoginUrlResponse:
    properties:
      url:
        type: string
    type: object
  dto.Group:
    properties:
      id:
        type: string
      is_confirmed:
        type: boolean
      leader_id:
        type: string
      members:
        items:
          $ref: '#/definitions/dto.UserInfo'
        type: array
      token:
        type: string
    type: object
  dto.JoinGroupRequest:
    properties:
      token:
        type: string
      user_id:
        type: string
    required:
    - token
    - user_id
    type: object
  dto.JoinGroupResponse:
    properties:
      group:
        $ref: '#/definitions/dto.Group'
    type: object
  dto.LeaveGroupRequest:
    properties:
      user_id:
        type: string
    required:
    - user_id
    type: object
  dto.LeaveGroupResponse:
    properties:
      group:
        $ref: '#/definitions/dto.Group'
    type: object
  dto.Pin:
    properties:
      activity_id:
        type: string
      code:
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.ResetPinResponse:
    properties:
      pin:
        $ref: '#/definitions/dto.Pin'
    type: object
  dto.Selection:
    properties:
      baan_id:
        type: string
      group_id:
        type: string
      order:
        type: integer
    type: object
  dto.Stamp:
    properties:
      id:
        type: string
      point_a:
        type: integer
      point_b:
        type: integer
      point_c:
        type: integer
      point_d:
        type: integer
      stamp:
        type: string
      user_id:
        type: string
    type: object
  dto.StampByUserIdBodyRequest:
    properties:
      activity_id:
        type: string
      pin_code:
        type: string
    type: object
  dto.StampByUserIdResponse:
    properties:
      stamp:
        $ref: '#/definitions/dto.Stamp'
    type: object
  dto.UpdateConfirmGroupBody:
    properties:
      is_confirmed:
        type: boolean
    required:
    - is_confirmed
    type: object
  dto.UpdateConfirmGroupResponse:
    properties:
      group:
        $ref: '#/definitions/dto.Group'
    type: object
  dto.UpdateSelectionRequest:
    properties:
      baan_id:
        type: string
      group_id:
        type: string
      order:
        type: integer
    required:
    - baan_id
    - group_id
    - order
    type: object
  dto.UpdateSelectionResponse:
    properties:
      selection:
        $ref: '#/definitions/dto.Selection'
    type: object
  dto.UpdateUserPictureResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.UpdateUserProfileBody:
    properties:
      baan:
        type: string
      drug_allergy:
        type: string
      faculty:
        type: string
      firstname:
        type: string
      food_allergy:
        type: string
      group_id:
        type: string
      illness:
        type: string
      lastname:
        type: string
      nickname:
        type: string
      parent:
        type: string
      parent_tel:
        type: string
      receive_gift:
        type: integer
      tel:
        type: string
      title:
        type: string
      year:
        type: integer
    type: object
  dto.UpdateUserProfileResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.User:
    properties:
      baan:
        type: string
      drug_allergy:
        type: string
      email:
        type: string
      faculty:
        type: string
      firstname:
        type: string
      food_allergy:
        type: string
      group_id:
        type: string
      id:
        type: string
      illness:
        type: string
      lastname:
        type: string
      nickname:
        type: string
      parent:
        type: string
      parent_tel:
        type: string
      photo_key:
        type: string
      photo_url:
        type: string
      receive_gift:
        type: integer
      role:
        $ref: '#/definitions/constant.Role'
      stamp:
        $ref: '#/definitions/dto.Stamp'
      tel:
        type: string
      title:
        type: string
      year:
        type: integer
    type: object
  dto.UserInfo:
    properties:
      first_name:
        type: string
      id:
        type: string
      image_url:
        type: string
      last_name:
        type: string
    type: object
  dto.VerifyGoogleLoginResponse:
    properties:
      credential:
        $ref: '#/definitions/dto.Credential'
      user_id:
        type: string
    type: object
host: localhost:3001
info:
  contact: {}
  description: the RPKM67 API server.
  title: RPKM67 API
  version: "1.0"
paths:
  /auth/google-url:
    get:
      description: get google login url
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetGoogleLoginUrlResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Get Google login url
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: get both new access token and refresh token
      parameters:
      - description: refresh token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Credential'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Refresh access token with refresh token
      tags:
      - auth
  /auth/verify-google:
    get:
      consumes:
      - text/plain
      description: returns user's credential
      parameters:
      - description: Code from google login
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VerifyGoogleLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Verify Google login
      tags:
      - auth
  /checkin:
    post:
      consumes:
      - application/json
      description: Create a check-in using email, event and user_id
      parameters:
      - description: Create CheckIn Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCheckInRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateCheckInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Create a check-in
      tags:
      - checkin
  /checkin/{userId}:
    get:
      consumes:
      - text/plain
      description: Find check-ins by user_id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindByUserIdCheckInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Find check-ins by user_id
      tags:
      - checkin
  /checkin/email/{email}:
    get:
      consumes:
      - text/plain
      description: Find check-ins by email
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindByEmailCheckInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Find check-ins by email
      tags:
      - checkin
  /clean-db:
    get:
      description: must be used only in development environment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Credential'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Clean all data in database (only in development environment)
      tags:
      - db
  /count/{name}:
    post:
      consumes:
      - application/json
      description: Add 1 to count metrics by name
      parameters:
      - description: Name of the count metric
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Count clicks
      tags:
      - count
  /group/{userId}:
    get:
      consumes:
      - text/plain
      description: user must be member of that group
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindByUserIdGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Find group by user id
      tags:
      - group
    put:
      consumes:
      - application/json
      description: only group leader can update this status
      parameters:
      - description: userId of request sender (must be group leader)
        in: path
        name: userId
        required: true
        type: string
      - description: update confirm request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateConfirmGroupBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateConfirmGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Update group isConfirmed status
      tags:
      - group
  /group/delete-member:
    delete:
      consumes:
      - application/json
      description: only leader can remove member, cannot remove yourself
      parameters:
      - description: delete request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteMemberGroupBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeleteMemberGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Removes user from group
      tags:
      - group
  /group/join:
    post:
      consumes:
      - application/json
      description: previous group gets deleted, cannot join another group you are
        the leader of group with more than 1 member
      parameters:
      - description: join request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.JoinGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JoinGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: User joins another group
      tags:
      - group
  /group/leave:
    post:
      consumes:
      - application/json
      description: cannot leave group if you are leader of a group (but you can use
        `join` to join another group)
      parameters:
      - description: leave request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LeaveGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LeaveGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: User leaves group
      tags:
      - group
  /group/token:
    get:
      consumes:
      - text/plain
      description: Group leader invites member by giving them the token
      parameters:
      - description: token of group
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindByTokenGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Find group by group's token
      tags:
      - group
  /pin:
    get:
      description: Staff only
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindAllPinResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Find all pins
      tags:
      - pin
  /pin/reset/{activityId}:
    post:
      consumes:
      - text/plain
      description: Staff only
      parameters:
      - description: should be `workshop-1` to `workshop-5`
        in: path
        name: activityId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResetPinResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Reset a pin
      tags:
      - pin
  /selection:
    delete:
      consumes:
      - application/json
      description: used when removing a selection from the list
      parameters:
      - description: delete selection request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteSelectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeleteSelectionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Delete selection, only group leader can call
      tags:
      - selection
    patch:
      consumes:
      - application/json
      description: used when selecting a selection on SELECTED order or baan
      parameters:
      - description: update selection request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSelectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateSelectionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Update selection, only group leader can call
      tags:
      - selection
    post:
      consumes:
      - application/json
      description: used when creating a selection on UNSELECTED order and baan
      parameters:
      - description: create selection request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSelectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateConfirmGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Create selection, only group leader can call
      tags:
      - selection
  /selection/{groupId}:
    get:
      consumes:
      - application/json
      description: used when getting all selections in a group
      parameters:
      - description: groupId of request sender
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindByGroupIdSelectionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: find selection by group id
      tags:
      - selection
  /selection/count-by-baan:
    get:
      description: displayed in baan selection page to show how many people are interested
        in each baan
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CountByBaanIdSelectionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: count selections by baan id
      tags:
      - selection
  /stamp/{userId}:
    get:
      consumes:
      - text/plain
      description: Find stamp by user id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindByUserIdStampResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Find stamp by user id
      tags:
      - stamp
    post:
      consumes:
      - application/json
      description: Stamp of activity id by user id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: 'activity_id is body can ONLY be: `workshop-1` to `workshop-5`,
          `landmark-1` to `landmark-4`, `club-1` to `club-2`'
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.StampByUserIdBodyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.StampByUserIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Stamp by user id
      tags:
      - stamp
  /user/{id}:
    get:
      consumes:
      - text/plain
      description: Find user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindOneUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Find user by id
      tags:
      - user
  /user/picture/{id}:
    put:
      consumes:
      - application/json
      description: Updates only field that are in input, used for both user picture
        update
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: image to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserPictureResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Update user's picture fields by id
      tags:
      - user
  /user/profile/{id}:
    patch:
      consumes:
      - application/json
      description: Updates only field that are in input, used for both user profile
        and update reward status
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: update user request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserProfileBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Update profile fields of user by id
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
