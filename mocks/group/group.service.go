// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/group/group.service.go

// Package mock_group is a generated GoMock package.
package mock_group

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apperror "github.com/isd-sgcu/rpkm67-gateway/apperror"
	dto "github.com/isd-sgcu/rpkm67-gateway/internal/dto"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteMember mocks base method.
func (m *MockService) DeleteMember(req *dto.DeleteMemberGroupRequest) (*dto.DeleteMemberGroupResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", req)
	ret0, _ := ret[0].(*dto.DeleteMemberGroupResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockServiceMockRecorder) DeleteMember(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockService)(nil).DeleteMember), req)
}

// FindByToken mocks base method.
func (m *MockService) FindByToken(req *dto.FindByTokenGroupRequest) (*dto.FindByTokenGroupResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", req)
	ret0, _ := ret[0].(*dto.FindByTokenGroupResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockServiceMockRecorder) FindByToken(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockService)(nil).FindByToken), req)
}

// FindOne mocks base method.
func (m *MockService) FindOne(req *dto.FindOneGroupRequest) (*dto.FindOneGroupResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", req)
	ret0, _ := ret[0].(*dto.FindOneGroupResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockServiceMockRecorder) FindOne(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockService)(nil).FindOne), req)
}

// Join mocks base method.
func (m *MockService) Join(req *dto.JoinGroupRequest) (*dto.JoinGroupResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", req)
	ret0, _ := ret[0].(*dto.JoinGroupResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// Join indicates an expected call of Join.
func (mr *MockServiceMockRecorder) Join(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockService)(nil).Join), req)
}

// Leave mocks base method.
func (m *MockService) Leave(req *dto.LeaveGroupRequest) (*dto.LeaveGroupResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", req)
	ret0, _ := ret[0].(*dto.LeaveGroupResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// Leave indicates an expected call of Leave.
func (mr *MockServiceMockRecorder) Leave(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockService)(nil).Leave), req)
}

// SelectBaan mocks base method.
func (m *MockService) SelectBaan(req *dto.SelectBaanRequest) (*dto.SelectBaanResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBaan", req)
	ret0, _ := ret[0].(*dto.SelectBaanResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// SelectBaan indicates an expected call of SelectBaan.
func (mr *MockServiceMockRecorder) SelectBaan(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBaan", reflect.TypeOf((*MockService)(nil).SelectBaan), req)
}

// Update mocks base method.
func (m *MockService) Update(req *dto.UpdateGroupRequest) (*dto.UpdateGroupResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", req)
	ret0, _ := ret[0].(*dto.UpdateGroupResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), req)
}
