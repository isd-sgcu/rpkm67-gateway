// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/checkin/checkin.service.go

// Package mock_checkin is a generated GoMock package.
package mock_checkin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apperror "github.com/isd-sgcu/rpkm67-gateway/apperror"
	dto "github.com/isd-sgcu/rpkm67-gateway/internal/dto"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(req *dto.CreateCheckInRequest) (*dto.CreateCheckInResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(*dto.CreateCheckInResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), req)
}

// FindByEmail mocks base method.
func (m *MockService) FindByEmail(req *dto.FindByEmailCheckInRequest) (*dto.FindByEmailCheckInResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", req)
	ret0, _ := ret[0].(*dto.FindByEmailCheckInResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockServiceMockRecorder) FindByEmail(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockService)(nil).FindByEmail), req)
}

// FindByUserID mocks base method.
func (m *MockService) FindByUserID(req *dto.FindByUserIdCheckInRequest) (*dto.FindByUserIdCheckInResponse, *apperror.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", req)
	ret0, _ := ret[0].(*dto.FindByUserIdCheckInResponse)
	ret1, _ := ret[1].(*apperror.AppError)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockServiceMockRecorder) FindByUserID(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockService)(nil).FindByUserID), req)
}
