// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/checkin/checkin.handler.go

// Package mock_checkin is a generated GoMock package.
package mock_checkin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	router "github.com/isd-sgcu/rpkm67-gateway/internal/router"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHandler) Create(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", c)
}

// Create indicates an expected call of Create.
func (mr *MockHandlerMockRecorder) Create(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHandler)(nil).Create), c)
}

// FindByEmail mocks base method.
func (m *MockHandler) FindByEmail(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindByEmail", c)
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockHandlerMockRecorder) FindByEmail(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockHandler)(nil).FindByEmail), c)
}

// FindByUserID mocks base method.
func (m *MockHandler) FindByUserID(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindByUserID", c)
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockHandlerMockRecorder) FindByUserID(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockHandler)(nil).FindByUserID), c)
}
