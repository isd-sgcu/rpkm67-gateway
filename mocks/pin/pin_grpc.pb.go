// Code generated by MockGen. DO NOT EDIT.
// Source: pin_grpc.pb.go

// Package mocks is a generated GoMock package.
package mock_pin

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/isd-sgcu/rpkm67-go-proto/rpkm67/backend/pin/v1"
	grpc "google.golang.org/grpc"
)

// MockPinServiceClient is a mock of PinServiceClient interface.
type MockPinServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPinServiceClientMockRecorder
}

// MockPinServiceClientMockRecorder is the mock recorder for MockPinServiceClient.
type MockPinServiceClientMockRecorder struct {
	mock *MockPinServiceClient
}

// NewMockPinServiceClient creates a new mock instance.
func NewMockPinServiceClient(ctrl *gomock.Controller) *MockPinServiceClient {
	mock := &MockPinServiceClient{ctrl: ctrl}
	mock.recorder = &MockPinServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinServiceClient) EXPECT() *MockPinServiceClientMockRecorder {
	return m.recorder
}

// CheckPin mocks base method.
func (m *MockPinServiceClient) CheckPin(ctx context.Context, in *v1.CheckPinRequest, opts ...grpc.CallOption) (*v1.CheckPinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckPin", varargs...)
	ret0, _ := ret[0].(*v1.CheckPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPin indicates an expected call of CheckPin.
func (mr *MockPinServiceClientMockRecorder) CheckPin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPin", reflect.TypeOf((*MockPinServiceClient)(nil).CheckPin), varargs...)
}

// FindAll mocks base method.
func (m *MockPinServiceClient) FindAll(ctx context.Context, in *v1.FindAllPinRequest, opts ...grpc.CallOption) (*v1.FindAllPinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAll", varargs...)
	ret0, _ := ret[0].(*v1.FindAllPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPinServiceClientMockRecorder) FindAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPinServiceClient)(nil).FindAll), varargs...)
}

// ResetPin mocks base method.
func (m *MockPinServiceClient) ResetPin(ctx context.Context, in *v1.ResetPinRequest, opts ...grpc.CallOption) (*v1.ResetPinResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetPin", varargs...)
	ret0, _ := ret[0].(*v1.ResetPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPin indicates an expected call of ResetPin.
func (mr *MockPinServiceClientMockRecorder) ResetPin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPin", reflect.TypeOf((*MockPinServiceClient)(nil).ResetPin), varargs...)
}

// MockPinServiceServer is a mock of PinServiceServer interface.
type MockPinServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPinServiceServerMockRecorder
}

// MockPinServiceServerMockRecorder is the mock recorder for MockPinServiceServer.
type MockPinServiceServerMockRecorder struct {
	mock *MockPinServiceServer
}

// NewMockPinServiceServer creates a new mock instance.
func NewMockPinServiceServer(ctrl *gomock.Controller) *MockPinServiceServer {
	mock := &MockPinServiceServer{ctrl: ctrl}
	mock.recorder = &MockPinServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinServiceServer) EXPECT() *MockPinServiceServerMockRecorder {
	return m.recorder
}

// CheckPin mocks base method.
func (m *MockPinServiceServer) CheckPin(arg0 context.Context, arg1 *v1.CheckPinRequest) (*v1.CheckPinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPin", arg0, arg1)
	ret0, _ := ret[0].(*v1.CheckPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPin indicates an expected call of CheckPin.
func (mr *MockPinServiceServerMockRecorder) CheckPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPin", reflect.TypeOf((*MockPinServiceServer)(nil).CheckPin), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockPinServiceServer) FindAll(arg0 context.Context, arg1 *v1.FindAllPinRequest) (*v1.FindAllPinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].(*v1.FindAllPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPinServiceServerMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPinServiceServer)(nil).FindAll), arg0, arg1)
}

// ResetPin mocks base method.
func (m *MockPinServiceServer) ResetPin(arg0 context.Context, arg1 *v1.ResetPinRequest) (*v1.ResetPinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPin", arg0, arg1)
	ret0, _ := ret[0].(*v1.ResetPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPin indicates an expected call of ResetPin.
func (mr *MockPinServiceServerMockRecorder) ResetPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPin", reflect.TypeOf((*MockPinServiceServer)(nil).ResetPin), arg0, arg1)
}

// mustEmbedUnimplementedPinServiceServer mocks base method.
func (m *MockPinServiceServer) mustEmbedUnimplementedPinServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPinServiceServer")
}

// mustEmbedUnimplementedPinServiceServer indicates an expected call of mustEmbedUnimplementedPinServiceServer.
func (mr *MockPinServiceServerMockRecorder) mustEmbedUnimplementedPinServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPinServiceServer", reflect.TypeOf((*MockPinServiceServer)(nil).mustEmbedUnimplementedPinServiceServer))
}

// MockUnsafePinServiceServer is a mock of UnsafePinServiceServer interface.
type MockUnsafePinServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePinServiceServerMockRecorder
}

// MockUnsafePinServiceServerMockRecorder is the mock recorder for MockUnsafePinServiceServer.
type MockUnsafePinServiceServerMockRecorder struct {
	mock *MockUnsafePinServiceServer
}

// NewMockUnsafePinServiceServer creates a new mock instance.
func NewMockUnsafePinServiceServer(ctrl *gomock.Controller) *MockUnsafePinServiceServer {
	mock := &MockUnsafePinServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePinServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePinServiceServer) EXPECT() *MockUnsafePinServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPinServiceServer mocks base method.
func (m *MockUnsafePinServiceServer) mustEmbedUnimplementedPinServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPinServiceServer")
}

// mustEmbedUnimplementedPinServiceServer indicates an expected call of mustEmbedUnimplementedPinServiceServer.
func (mr *MockUnsafePinServiceServerMockRecorder) mustEmbedUnimplementedPinServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPinServiceServer", reflect.TypeOf((*MockUnsafePinServiceServer)(nil).mustEmbedUnimplementedPinServiceServer))
}
