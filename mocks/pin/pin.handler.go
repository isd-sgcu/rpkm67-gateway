// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pin/pin.handler.go

// Package mock_pin is a generated GoMock package.
package mock_pin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "github.com/isd-sgcu/rpkm67-gateway/internal/context"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockHandler) FindAll(c context.Ctx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindAll", c)
}

// FindAll indicates an expected call of FindAll.
func (mr *MockHandlerMockRecorder) FindAll(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockHandler)(nil).FindAll), c)
}

// ResetPin mocks base method.
func (m *MockHandler) ResetPin(c context.Ctx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetPin", c)
}

// ResetPin indicates an expected call of ResetPin.
func (mr *MockHandlerMockRecorder) ResetPin(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPin", reflect.TypeOf((*MockHandler)(nil).ResetPin), c)
}
