// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/baan/baan.handler.go

// Package mock_baan is a generated GoMock package.
package mock_baan

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	router "github.com/isd-sgcu/rpkm67-gateway/internal/router"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// FindAllBaan mocks base method.
func (m *MockHandler) FindAllBaan(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindAllBaan", c)
}

// FindAllBaan indicates an expected call of FindAllBaan.
func (mr *MockHandlerMockRecorder) FindAllBaan(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBaan", reflect.TypeOf((*MockHandler)(nil).FindAllBaan), c)
}

// FindOneBaan mocks base method.
func (m *MockHandler) FindOneBaan(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindOneBaan", c)
}

// FindOneBaan indicates an expected call of FindOneBaan.
func (mr *MockHandlerMockRecorder) FindOneBaan(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneBaan", reflect.TypeOf((*MockHandler)(nil).FindOneBaan), c)
}
