// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/object/object.client.go

// Package mock_object is a generated GoMock package.
package mock_object

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/isd-sgcu/rpkm67-go-proto/rpkm67/store/object/v1"
	grpc "google.golang.org/grpc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DeleteByKey mocks base method.
func (m *MockClient) DeleteByKey(ctx context.Context, in *v1.DeleteByKeyObjectRequest, opts ...grpc.CallOption) (*v1.DeleteByKeyObjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByKey", varargs...)
	ret0, _ := ret[0].(*v1.DeleteByKeyObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByKey indicates an expected call of DeleteByKey.
func (mr *MockClientMockRecorder) DeleteByKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKey", reflect.TypeOf((*MockClient)(nil).DeleteByKey), varargs...)
}

// FindByKey mocks base method.
func (m *MockClient) FindByKey(ctx context.Context, in *v1.FindByKeyObjectRequest, opts ...grpc.CallOption) (*v1.FindByKeyObjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByKey", varargs...)
	ret0, _ := ret[0].(*v1.FindByKeyObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockClientMockRecorder) FindByKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockClient)(nil).FindByKey), varargs...)
}

// Upload mocks base method.
func (m *MockClient) Upload(ctx context.Context, in *v1.UploadObjectRequest, opts ...grpc.CallOption) (*v1.UploadObjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].(*v1.UploadObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockClientMockRecorder) Upload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockClient)(nil).Upload), varargs...)
}
