// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth/auth.handler.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method.
func (m *MockHandler) ForgotPassword(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForgotPassword", c)
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockHandlerMockRecorder) ForgotPassword(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockHandler)(nil).ForgotPassword), c)
}

// RefreshToken mocks base method.
func (m *MockHandler) RefreshToken(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshToken", c)
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockHandlerMockRecorder) RefreshToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockHandler)(nil).RefreshToken), c)
}

// ResetPassword mocks base method.
func (m *MockHandler) ResetPassword(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetPassword", c)
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockHandlerMockRecorder) ResetPassword(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockHandler)(nil).ResetPassword), c)
}

// SignIn mocks base method.
func (m *MockHandler) SignIn(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignIn", c)
}

// SignIn indicates an expected call of SignIn.
func (mr *MockHandlerMockRecorder) SignIn(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockHandler)(nil).SignIn), c)
}

// SignOut mocks base method.
func (m *MockHandler) SignOut(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignOut", c)
}

// SignOut indicates an expected call of SignOut.
func (mr *MockHandlerMockRecorder) SignOut(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockHandler)(nil).SignOut), c)
}

// SignUp mocks base method.
func (m *MockHandler) SignUp(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignUp", c)
}

// SignUp indicates an expected call of SignUp.
func (mr *MockHandlerMockRecorder) SignUp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockHandler)(nil).SignUp), c)
}

// Validate mocks base method.
func (m *MockHandler) Validate(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Validate", c)
}

// Validate indicates an expected call of Validate.
func (mr *MockHandlerMockRecorder) Validate(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockHandler)(nil).Validate), c)
}
