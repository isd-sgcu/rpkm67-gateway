// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth/auth.handler.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	router "github.com/isd-sgcu/rpkm67-gateway/internal/router"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetGoogleLoginUrl mocks base method.
func (m *MockHandler) GetGoogleLoginUrl(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetGoogleLoginUrl", c)
}

// GetGoogleLoginUrl indicates an expected call of GetGoogleLoginUrl.
func (mr *MockHandlerMockRecorder) GetGoogleLoginUrl(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogleLoginUrl", reflect.TypeOf((*MockHandler)(nil).GetGoogleLoginUrl), c)
}

// RefreshToken mocks base method.
func (m *MockHandler) RefreshToken(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshToken", c)
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockHandlerMockRecorder) RefreshToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockHandler)(nil).RefreshToken), c)
}

// Test mocks base method.
func (m *MockHandler) Test(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Test", c)
}

// Test indicates an expected call of Test.
func (mr *MockHandlerMockRecorder) Test(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockHandler)(nil).Test), c)
}

// Validate mocks base method.
func (m *MockHandler) Validate(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Validate", c)
}

// Validate indicates an expected call of Validate.
func (mr *MockHandlerMockRecorder) Validate(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockHandler)(nil).Validate), c)
}

// VerifyGoogleLogin mocks base method.
func (m *MockHandler) VerifyGoogleLogin(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyGoogleLogin", c)
}

// VerifyGoogleLogin indicates an expected call of VerifyGoogleLogin.
func (mr *MockHandlerMockRecorder) VerifyGoogleLogin(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyGoogleLogin", reflect.TypeOf((*MockHandler)(nil).VerifyGoogleLogin), c)
}
