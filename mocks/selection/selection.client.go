// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/selection/selection.client.go

// Package mock_selection is a generated GoMock package.
package mock_selection

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/isd-sgcu/rpkm67-go-proto/rpkm67/backend/selection/v1"
	grpc "google.golang.org/grpc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CountByBaanId mocks base method.
func (m *MockClient) CountByBaanId(ctx context.Context, in *v1.CountByBaanIdSelectionRequest, opts ...grpc.CallOption) (*v1.CountByBaanIdSelectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountByBaanId", varargs...)
	ret0, _ := ret[0].(*v1.CountByBaanIdSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByBaanId indicates an expected call of CountByBaanId.
func (mr *MockClientMockRecorder) CountByBaanId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByBaanId", reflect.TypeOf((*MockClient)(nil).CountByBaanId), varargs...)
}

// Create mocks base method.
func (m *MockClient) Create(ctx context.Context, in *v1.CreateSelectionRequest, opts ...grpc.CallOption) (*v1.CreateSelectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1.CreateSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockClient) Delete(ctx context.Context, in *v1.DeleteSelectionRequest, opts ...grpc.CallOption) (*v1.DeleteSelectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*v1.DeleteSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), varargs...)
}

// FindByGroupId mocks base method.
func (m *MockClient) FindByGroupId(ctx context.Context, in *v1.FindByGroupIdSelectionRequest, opts ...grpc.CallOption) (*v1.FindByGroupIdSelectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByGroupId", varargs...)
	ret0, _ := ret[0].(*v1.FindByGroupIdSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGroupId indicates an expected call of FindByGroupId.
func (mr *MockClientMockRecorder) FindByGroupId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGroupId", reflect.TypeOf((*MockClient)(nil).FindByGroupId), varargs...)
}
