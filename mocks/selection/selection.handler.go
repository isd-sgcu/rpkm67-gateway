// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/selection/selection.handler.go

// Package mock_selection is a generated GoMock package.
package mock_selection

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	router "github.com/isd-sgcu/rpkm67-gateway/internal/router"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// CreateSelection mocks base method.
func (m *MockHandler) CreateSelection(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSelection", c)
}

// CreateSelection indicates an expected call of CreateSelection.
func (mr *MockHandlerMockRecorder) CreateSelection(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSelection", reflect.TypeOf((*MockHandler)(nil).CreateSelection), c)
}

// FindByStudentIdSelection mocks base method.
func (m *MockHandler) FindByStudentIdSelection(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindByStudentIdSelection", c)
}

// FindByStudentIdSelection indicates an expected call of FindByStudentIdSelection.
func (mr *MockHandlerMockRecorder) FindByStudentIdSelection(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStudentIdSelection", reflect.TypeOf((*MockHandler)(nil).FindByStudentIdSelection), c)
}

// UpdateSelection mocks base method.
func (m *MockHandler) UpdateSelection(c router.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSelection", c)
}

// UpdateSelection indicates an expected call of UpdateSelection.
func (mr *MockHandlerMockRecorder) UpdateSelection(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelection", reflect.TypeOf((*MockHandler)(nil).UpdateSelection), c)
}
